#include <LedControl.h>
#include <GFButton.h>

//matrix

byte error[] = { B00111100, B01000010, B10100101, B10011001, B10011001, B10100101, B01000010, B00111100}; //error sprite

//die type sprites
byte d4[] = { B00000111, B00000000, B00101000, B00101000, B00111000, B00001000, B00001000, B00000000};
byte d6[] = { B00000111, B00000000, B00111000, B00100000, B00111000, B00101000, B00111000, B00000000};
byte d8[] = { B00000111, B00000000, B00111000, B00101000, B00111000, B00101000, B00111000, B00000000};
byte d10[] = { B00000111, B00000000, B00101110, B00101010, B00101010, B00101010, B00101110, B00000000};
byte d12[] = { B00000111, B00000000, B00101110, B00100010, B00101110, B00101000, B00101110, B00000000};
byte d20[] = { B00000111, B00000000, B11101110, B00101010, B11101010, B10001010, B11101110, B00000000};
byte d100[] = { B00000111, B00000000, B01011111, B01010101, B01010101, B01010101, B01011111, B00000000};
byte *dList[] = {d4, d6, d8, d10, d12, d20, d100, error};

//number of dice sprites
byte n1[] = { B00000011, B00000000, B00000100, B10100100, B01000100, B10100100, B00000100, B00000000};
byte n2[] = { B00000011, B00000000, B00001110, B10100010, B01001110, B10101000, B00001110, B00000000};
byte n3[] = { B00000011, B00000000, B00001110, B10100010, B01001110, B10100010, B00001110, B00000000};
byte n4[] = { B00000011, B00000000, B00001010, B10101010, B01001110, B10100010, B00000010, B00000000};
byte n5[] = { B00000011, B00000000, B00001110, B10101000, B01001110, B10100010, B00001110, B00000000};
byte n6[] = { B00000011, B00000000, B00001110, B10101000, B01001110, B10101010, B00001110, B00000000};
byte n7[] = { B00000011, B00000000, B00001110, B10100010, B01000100, B10101000, B00001000, B00000000};
byte n8[] = { B00000011, B00000000, B00001110, B10101010, B01001110, B10101010, B00001110, B00000000};
byte n9[] = { B00000011, B00000000, B00001110, B10101010, B01001110, B10100010, B00001110, B00000000};
byte n10[] = { B00000011, B00000000, B00010111, B10110101, B01010101, B10110101, B00010111, B00000000};
byte *nList[] = {n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, error};

//result sprites
//0<x<10
byte r1[] = { B00000001, B00000000, B00000010, B00000010, B00000010, B00000010, B00000010, B00000000};
byte r2[] = { B00000001, B00000000, B00000111, B00000001, B00000111, B00000100, B00000111, B00000000};
byte r3[] = { B00000001, B00000000, B00000111, B00000001, B00000111, B00000001, B00000111, B00000000};
byte r4[] = { B00000001, B00000000, B00000101, B00000101, B00000111, B00000001, B00000001, B00000000};
byte r5[] = { B00000001, B00000000, B00000111, B00000100, B00000111, B00000001, B00000111, B00000000};
byte r6[] = { B00000001, B00000000, B00000111, B00000100, B00000111, B00000101, B00000111, B00000000};
byte r7[] = { B00000001, B00000000, B00000111, B00000001, B00000010, B00000100, B00000100, B00000000};
byte r8[] = { B00000001, B00000000, B00000111, B00000101, B00000111, B00000101, B00000111, B00000000};
byte r9[] = { B00000001, B00000000, B00000111, B00000101, B00000111, B00000001, B00000111, B00000000};
//9<x<20
byte r10[] = { B00000001, B00000000, B00100111, B00100101, B00100101, B00100101, B00100111, B00000000};
byte r11[] = { B00000001, B00000000, B00100100, B00100100, B00100100, B00100100, B00100100, B00000000};
byte r12[] = { B00000001, B00000000, B00100111, B00100001, B00100111, B00100100, B00100111, B00000000};
byte r13[] = { B00000001, B00000000, B00100111, B00100001, B00100111, B00100001, B00100111, B00000000};
byte r14[] = { B00000001, B00000000, B00100101, B00100101, B00100111, B00100001, B00100001, B00000000};
byte r15[] = { B00000001, B00000000, B00100111, B00100100, B00100111, B00100001, B00100111, B00000000};
byte r16[] = { B00000001, B00000000, B00100111, B00100100, B00100111, B00100101, B00100111, B00000000};
byte r17[] = { B00000001, B00000000, B00100111, B00100001, B00100010, B00100100, B00100100, B00000000};
byte r18[] = { B00000001, B00000000, B00100111, B00100101, B00100111, B00100101, B00100111, B00000000};
byte r19[] = { B00000001, B00000000, B00100111, B00100101, B00100111, B00100001, B00100111, B00000000};
//19<x<30
byte r20[] = { B00000001, B00000000, B01110111, B00010101, B01110101, B01000101, B01110111, B00000000};
byte r21[] = { B00000001, B00000000, B01110010, B00010010, B01110010, B01000010, B01110010, B00000000};
byte r22[] = { B00000001, B00000000, B01110111, B00010001, B01110111, B01000100, B01110111, B00000000};
byte r23[] = { B00000001, B00000000, B01110111, B00010001, B01110111, B01000001, B01110111, B00000000};
byte r24[] = { B00000001, B00000000, B01110101, B00010101, B01110111, B01000001, B01110001, B00000000};
byte r25[] = { B00000001, B00000000, B01110111, B00010100, B01110111, B01000001, B01110111, B00000000};
byte r26[] = { B00000001, B00000000, B01110111, B00010100, B01110111, B01000101, B01110111, B00000000};
byte r27[] = { B00000001, B00000000, B01110111, B00010001, B01110010, B01000100, B01110100, B00000000};
byte r28[] = { B00000001, B00000000, B01110111, B00010101, B01110111, B01000101, B01110111, B00000000};
byte r29[] = { B00000001, B00000000, B01110111, B00010101, B01110111, B01000001, B01110111, B00000000};
//29<x<40
byte r30[] = { B00000001, B00000000, B01110111, B00010101, B01110101, B00010101, B01110111, B00000000};
byte r31[] = { B00000001, B00000000, B01110010, B00010010, B01110010, B00010010, B01110010, B00000000};
byte r32[] = { B00000001, B00000000, B01110111, B00010001, B01110111, B00010100, B01110111, B00000000};
byte r33[] = { B00000001, B00000000, B01110111, B00010001, B01110111, B00010001, B01110111, B00000000};
byte r34[] = { B00000001, B00000000, B01110101, B00010101, B01110111, B00010001, B01110001, B00000000};
byte r35[] = { B00000001, B00000000, B01110111, B00010100, B01110111, B00010001, B01110111, B00000000};
byte r36[] = { B00000001, B00000000, B01110111, B00010100, B01110111, B00010101, B01110111, B00000000};
byte r37[] = { B00000001, B00000000, B01110111, B00010001, B01110010, B00010100, B01110100, B00000000};
byte r38[] = { B00000001, B00000000, B01110111, B00010101, B01110111, B00010101, B01110111, B00000000};
byte r39[] = { B00000001, B00000000, B01110111, B00010101, B01110111, B00010001, B01110111, B00000000};
//39<x<50
byte r40[] = { B00000001, B00000000, B01010111, B01010101, B01110101, B00010101, B00010111, B00000000};
byte r41[] = { B00000001, B00000000, B01010010, B01010010, B01110010, B00010010, B00010010, B00000000};
byte r42[] = { B00000001, B00000000, B01010111, B01010001, B01110111, B00010100, B00010111, B00000000};
byte r43[] = { B00000001, B00000000, B01010111, B01010001, B01110111, B00010001, B00010111, B00000000};
byte r44[] = { B00000001, B00000000, B01010101, B01010101, B01110111, B00010001, B00010001, B00000000};
byte r45[] = { B00000001, B00000000, B01010111, B01010100, B01110111, B00010001, B00010111, B00000000};
byte r46[] = { B00000001, B00000000, B01010111, B01010100, B01110111, B00010101, B00010111, B00000000};
byte r47[] = { B00000001, B00000000, B01010111, B01010001, B01110010, B00010100, B00010100, B00000000};
byte r48[] = { B00000001, B00000000, B01010111, B01010101, B01110111, B00010101, B00010111, B00000000};
byte r49[] = { B00000001, B00000000, B01010111, B01010101, B01110111, B00010001, B00010111, B00000000};
//49<x<60
byte r50[] = { B00000001, B00000000, B01110111, B01000101, B01110101, B00010101, B01110111, B00000000};
byte r51[] = { B00000001, B00000000, B01110010, B01000010, B01110010, B00010010, B01110010, B00000000};
byte r52[] = { B00000001, B00000000, B01110111, B01000001, B01110111, B00010100, B01110111, B00000000};
byte r53[] = { B00000001, B00000000, B01110111, B01000001, B01110111, B00010001, B01110111, B00000000};
byte r54[] = { B00000001, B00000000, B01110101, B01000101, B01110111, B00010001, B01110001, B00000000};
byte r55[] = { B00000001, B00000000, B01110111, B01000100, B01110111, B00010001, B01110111, B00000000};
byte r56[] = { B00000001, B00000000, B01110111, B01000100, B01110111, B00010101, B01110111, B00000000};
byte r57[] = { B00000001, B00000000, B01110111, B01000001, B01110010, B00010100, B01110100, B00000000};
byte r58[] = { B00000001, B00000000, B01110111, B01000101, B01110111, B00010101, B01110111, B00000000};
byte r59[] = { B00000001, B00000000, B01110111, B01000101, B01110111, B00010001, B01110111, B00000000};
//59<x<70
byte r60[] = { B00000001, B00000000, B01110111, B01000101, B01110101, B01010101, B01110111, B00000000};
byte r61[] = { B00000001, B00000000, B01110010, B01000010, B01110010, B01010010, B01110010, B00000000};
byte r62[] = { B00000001, B00000000, B01110111, B01000001, B01110111, B01010100, B01110111, B00000000};
byte r63[] = { B00000001, B00000000, B01110111, B01000001, B01110111, B01010001, B01110111, B00000000};
byte r64[] = { B00000001, B00000000, B01110101, B01000101, B01110111, B01010001, B01110001, B00000000};
byte r65[] = { B00000001, B00000000, B01110111, B01000100, B01110111, B01010001, B01110111, B00000000};
byte r66[] = { B00000001, B00000000, B01110111, B01000100, B01110111, B01010101, B01110111, B00000000};
byte r67[] = { B00000001, B00000000, B01110111, B01000001, B01110010, B01010100, B01110100, B00000000};
byte r68[] = { B00000001, B00000000, B01110111, B01000101, B01110111, B01010101, B01110111, B00000000};
byte r69[] = { B00000001, B00000000, B01110111, B01000101, B01110111, B01010001, B01110111, B00000000};
//69<x<80
byte r70[] = { B00000001, B00000000, B01110111, B00010101, B00100101, B01000101, B01000111, B00000000};
byte r71[] = { B00000001, B00000000, B01110010, B00010010, B00100010, B01000010, B01000010, B00000000};
byte r72[] = { B00000001, B00000000, B01110111, B00010001, B00100111, B01000100, B01000111, B00000000};
byte r73[] = { B00000001, B00000000, B01110111, B00010001, B00100111, B01000001, B01000111, B00000000};
byte r74[] = { B00000001, B00000000, B01110101, B00010101, B00100111, B01000001, B01000001, B00000000};
byte r75[] = { B00000001, B00000000, B01110111, B00010100, B00100111, B01000001, B01000111, B00000000};
byte r76[] = { B00000001, B00000000, B01110111, B00010100, B00100111, B01000101, B01000111, B00000000};
byte r77[] = { B00000001, B00000000, B01110111, B00010001, B00100010, B01000100, B01000100, B00000000};
byte r78[] = { B00000001, B00000000, B01110111, B00010101, B00100111, B01000101, B01000111, B00000000};
byte r79[] = { B00000001, B00000000, B01110111, B00010101, B00100111, B01000001, B01000111, B00000000};
//78<x<90
byte r80[] = { B00000001, B00000000, B01110111, B01010101, B01110101, B01010101, B01110111, B00000000};
byte r81[] = { B00000001, B00000000, B01110010, B01010010, B01110010, B01010010, B01110010, B00000000};
byte r82[] = { B00000001, B00000000, B01110111, B01010001, B01110111, B01010100, B01110111, B00000000};
byte r83[] = { B00000001, B00000000, B01110111, B01010001, B01110111, B01010001, B01110111, B00000000};
byte r84[] = { B00000001, B00000000, B01110101, B01010101, B01110111, B01010001, B01110001, B00000000};
byte r85[] = { B00000001, B00000000, B01110111, B01010100, B01110111, B01010001, B01110111, B00000000};
byte r86[] = { B00000001, B00000000, B01110111, B01010100, B01110111, B01010101, B01110111, B00000000};
byte r87[] = { B00000001, B00000000, B01110111, B01010001, B01110010, B01010100, B01110100, B00000000};
byte r88[] = { B00000001, B00000000, B01110111, B01010101, B01110111, B01010101, B01110111, B00000000};
byte r89[] = { B00000001, B00000000, B01110111, B01010101, B01110111, B01010001, B01110111, B00000000};
//89<x<100
byte r90[] = { B00000001, B00000000, B01110111, B01010101, B01110101, B00010101, B01110111, B00000000};
byte r91[] = { B00000001, B00000000, B01110010, B01010010, B01110010, B00010010, B01110010, B00000000};
byte r92[] = { B00000001, B00000000, B01110111, B01010001, B01110111, B00010100, B01110111, B00000000};
byte r93[] = { B00000001, B00000000, B01110111, B01010001, B01110111, B00010001, B01110111, B00000000};
byte r94[] = { B00000001, B00000000, B01110101, B01010101, B01110111, B00010001, B01110001, B00000000};
byte r95[] = { B00000001, B00000000, B01110111, B01010100, B01110111, B00010001, B01110111, B00000000};
byte r96[] = { B00000001, B00000000, B01110111, B01010100, B01110111, B00010101, B01110111, B00000000};
byte r97[] = { B00000001, B00000000, B01110111, B01010001, B01110010, B00010100, B01110100, B00000000};
byte r98[] = { B00000001, B00000000, B01110111, B01010101, B01110111, B00010101, B01110111, B00000000};
byte r99[] = { B00000001, B00000000, B01110111, B01010101, B01110111, B00010001, B01110111, B00000000};
//100
byte r100[] = { B00000001, B00000000, B01011111, B01010101, B01010101, B01010101, B01011111, B00000000};
byte *rList[] = {r1, r2, r3, r4, r5, r6, r7, r8, r9, r10,
                 r11,r12, r13, r14, r15, r16, r17, r18, r19,r20,
                 r21, r22, r23, r24, r25, r26, r27, r28, r29, r30,
                 r31, r32, r33, r34, r35, r36, r37, r38, r39, r40,
                 r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, 
                 r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, 
                 r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, 
                 r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, 
                 r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, 
                 r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, error};

//Rotary Encoder
int CLKE = 2;                     //encoder clk pin
int DTE = 3;                      //encoder dt pin
int counter = 0;
int currentStateCLK = 0;
int lastStateCLK = 0;

GFButton botao(A1);               //button pin
int mode = 0;                     //program stage

int reLim = 6;                    //rotary encoder limit
int uni_dice = 0;                 //dice quantity
int die = 0;                      //die type
long result_dice;                 //roll result

int DIN = 12;                     //matrix
int CS =  11;                     //matrix
int CLK = 10;                     //matrix

//matrix
LedControl lc = LedControl(DIN, CLK, CS, 0);

void printByte(byte character []) {
  int i = 0;

  for (i = 0; i < 8; i++) {
    lc.setRow(0, i, character[i]);
  }
}
//matrix

//Rotary Encoder
void updateEncoder () {
  currentStateCLK = digitalRead(CLKE); // Read the current state of CLK

  if (currentStateCLK != lastStateCLK  && currentStateCLK == 1){

    if (digitalRead(DTE) != currentStateCLK) {
      // Encoder is rotating Counter ClockWise
      if (counter < reLim){
        counter ++;
      }
      else{
        counter  = 0;
      }
    } 
    else {
      // Encoder is rotating ClockWise
      if (counter > 0){
        counter --;
      }
      else{
        counter = reLim;
      }
    }
  }

  lastStateCLK = currentStateCLK; // Remember last CLK state
}
//Rotary Encoder

void nextStage (GFButton& botao) {
  mode++;
  counter = 0;
}

//set dice number
void numDice () {
  uni_dice = counter + 1;
  printByte(nList[counter]);
}

//generate roll result
void result () {
  result_dice = int(random(uni_dice, ((uni_dice * die) + 1)));
  lc.clearDisplay(0);

  printByte(rList[result_dice - 1]);

  delay(4200);
  lc.clearDisplay(0);
}

void setup() {
  Serial.begin(9600);

  //matrix
  lc.shutdown(0, false);      //The MAX72XX is in power-saving mode on startup
  lc.setIntensity(0, 3);      // Set the brightness (maximum value = 15)
  lc.clearDisplay(0);         // and clear the display
  //matrix

  //Encoder
  pinMode(CLKE,INPUT);         // Set encoder pins as inputs
  pinMode(DTE,INPUT);          // Set encoder pins as inputs

  lastStateCLK = digitalRead(CLKE);  // Read the initial state of CLK
  
  attachInterrupt(0, updateEncoder, CHANGE);  // Call updateEncoder() when any high/low changed seen on interrupt 0 (pin 2)
  attachInterrupt(1, updateEncoder, CHANGE);  // Call updateEncoder() when any high/low changed seen on interrupt 1 (pin 3)
  //Encoder

  randomSeed(analogRead(4));
  
  botao.setPressHandler(nextStage);
}

void loop() {
  botao.process();
  
  //see die type
  if (mode == 0) {
    if (counter == 0) {
      die = 4;
    }
    else if (counter == 1) {
      die = 6;
    }
    else if (counter == 2) {
      die = 8;
    }
    else if (counter == 3) {
      die = 10;
    }
    else if (counter == 4) {
      die = 12;
    }
    else if (counter == 5) {
      die = 20;
    }
    else if (counter == 6) {
      die = 100;
    }
    printByte(dList[counter]);
  }
  
  //see number of dice rolled
  else if (mode == 1) {
    if (die == 4) {
      reLim = 9;
    }
    else if (die == 6) {
      reLim = 9;
    }
    else if (die == 8) {
      reLim = 9;
    }
    else if (die == 10) {
      reLim = 9;
    }
    else if (die == 12) {
      reLim = 7;
    }
    else if (die == 20) {
      reLim = 4;
    }
    else if (die == 100) {
      reLim = 0;
    }
    numDice();
  }
  
  //show result
  else if (mode == 2) {
    result();
    mode = 0;
    reLim = 6;
  }
  
  delay(20);/*1 = 1 milessimo de seg*/
}
